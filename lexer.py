import re

# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Ç–æ–∫–µ–Ω–æ–≤
TOKEN_SPECIFICATION = [
    ("NUMBER", r"\d+(\.\d*)?"),  # –ß–∏—Å–ª–∞ (—Ü–µ–ª—ã–µ –∏ –¥—Ä–æ–±–Ω—ã–µ)
    ("STRING", r'"[^"]*"'),      # –°—Ç—Ä–æ–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    ("PRINT", r"PRINT"),         # –ö–æ–º–∞–Ω–¥–∞ PRINT
    ("LET", r"LET"),             # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ LET X = 10
    ("IF", r"IF"),               # –£—Å–ª–æ–≤–∏–µ
    ("THEN", r"THEN"),           # THEN
    ("GOTO", r"GOTO"),           # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –º–µ—Ç–∫–µ
    ("END", r"END"),             # –ö–æ–Ω–µ—Ü –ø—Ä–æ–≥—Ä–∞–º–º—ã
    ("ID", r"[A-Za-z_][A-Za-z0-9_]*"),  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (X, Y, count)
    ("OP", r"[+\-*/=<>]"),         # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã (+ - * / =)
    ("NEWLINE", r"\n"),          # –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
    ("SKIP", r"[ \t]+"),         # –ü—Ä–æ–±–µ–ª—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    ("MISMATCH", r".")           # –û—à–∏–±–∫–∞
]

TOKEN_RE = re.compile("|".join(f"(?P<{name}>{regex})" for name, regex in TOKEN_SPECIFICATION))


# üîπ –§—É–Ω–∫—Ü–∏—è –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
def lexer(code):
    tokens = []
    for match in TOKEN_RE.finditer(code):
        kind = match.lastgroup
        value = match.group()
        if kind == "SKIP":
            continue
        elif kind == "MISMATCH":
            raise SyntaxError(f"Unexpected character: {value}")
        tokens.append((kind, value))
    return tokens


# üîπ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    code = '''
    PRINT "Hello, BASIC!"
    LET X = 10
    IF X > 5 THEN PRINT "X is greater than 5"
    END
    '''
    print(lexer(code))
