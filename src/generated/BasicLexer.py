# Generated from C:/Users/danil/PycharmProjects/basic-compiler/grammar/Basic.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,261,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,3,0,83,8,0,1,0,1,0,1,1,4,1,88,8,1,11,1,12,1,89,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,5,2,99,8,2,10,2,12,2,102,9,2,1,2,1,2,1,2,1,
        2,1,3,1,3,5,3,110,8,3,10,3,12,3,113,9,3,1,3,1,3,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
        14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,5,20,198,8,20,10,20,12,20,
        201,9,20,1,21,4,21,204,8,21,11,21,12,21,205,1,21,1,21,4,21,210,8,
        21,11,21,12,21,211,3,21,214,8,21,1,22,1,22,5,22,218,8,22,10,22,12,
        22,221,9,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,
        32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,
        38,1,39,1,39,1,219,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,1,0,7,2,0,
        9,9,32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,2,0,33,33,36,37,269,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,82,
        1,0,0,0,3,87,1,0,0,0,5,93,1,0,0,0,7,107,1,0,0,0,9,116,1,0,0,0,11,
        119,1,0,0,0,13,124,1,0,0,0,15,129,1,0,0,0,17,135,1,0,0,0,19,139,
        1,0,0,0,21,143,1,0,0,0,23,148,1,0,0,0,25,152,1,0,0,0,27,155,1,0,
        0,0,29,160,1,0,0,0,31,165,1,0,0,0,33,171,1,0,0,0,35,178,1,0,0,0,
        37,184,1,0,0,0,39,189,1,0,0,0,41,195,1,0,0,0,43,203,1,0,0,0,45,215,
        1,0,0,0,47,224,1,0,0,0,49,226,1,0,0,0,51,228,1,0,0,0,53,230,1,0,
        0,0,55,232,1,0,0,0,57,235,1,0,0,0,59,238,1,0,0,0,61,241,1,0,0,0,
        63,243,1,0,0,0,65,245,1,0,0,0,67,247,1,0,0,0,69,249,1,0,0,0,71,251,
        1,0,0,0,73,253,1,0,0,0,75,255,1,0,0,0,77,257,1,0,0,0,79,259,1,0,
        0,0,81,83,5,13,0,0,82,81,1,0,0,0,82,83,1,0,0,0,83,84,1,0,0,0,84,
        85,5,10,0,0,85,2,1,0,0,0,86,88,7,0,0,0,87,86,1,0,0,0,88,89,1,0,0,
        0,89,87,1,0,0,0,89,90,1,0,0,0,90,91,1,0,0,0,91,92,6,1,0,0,92,4,1,
        0,0,0,93,94,5,82,0,0,94,95,5,69,0,0,95,96,5,77,0,0,96,100,1,0,0,
        0,97,99,8,1,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,
        101,1,0,0,0,101,103,1,0,0,0,102,100,1,0,0,0,103,104,3,1,0,0,104,
        105,1,0,0,0,105,106,6,2,0,0,106,6,1,0,0,0,107,111,5,39,0,0,108,110,
        8,1,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,
        1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,115,6,3,0,0,115,8,1,
        0,0,0,116,117,5,73,0,0,117,118,5,70,0,0,118,10,1,0,0,0,119,120,5,
        84,0,0,120,121,5,72,0,0,121,122,5,69,0,0,122,123,5,78,0,0,123,12,
        1,0,0,0,124,125,5,69,0,0,125,126,5,76,0,0,126,127,5,83,0,0,127,128,
        5,69,0,0,128,14,1,0,0,0,129,130,5,80,0,0,130,131,5,82,0,0,131,132,
        5,73,0,0,132,133,5,78,0,0,133,134,5,84,0,0,134,16,1,0,0,0,135,136,
        5,76,0,0,136,137,5,69,0,0,137,138,5,84,0,0,138,18,1,0,0,0,139,140,
        5,69,0,0,140,141,5,78,0,0,141,142,5,68,0,0,142,20,1,0,0,0,143,144,
        5,71,0,0,144,145,5,79,0,0,145,146,5,84,0,0,146,147,5,79,0,0,147,
        22,1,0,0,0,148,149,5,70,0,0,149,150,5,79,0,0,150,151,5,82,0,0,151,
        24,1,0,0,0,152,153,5,84,0,0,153,154,5,79,0,0,154,26,1,0,0,0,155,
        156,5,83,0,0,156,157,5,84,0,0,157,158,5,69,0,0,158,159,5,80,0,0,
        159,28,1,0,0,0,160,161,5,78,0,0,161,162,5,69,0,0,162,163,5,88,0,
        0,163,164,5,84,0,0,164,30,1,0,0,0,165,166,5,71,0,0,166,167,5,79,
        0,0,167,168,5,83,0,0,168,169,5,85,0,0,169,170,5,66,0,0,170,32,1,
        0,0,0,171,172,5,82,0,0,172,173,5,69,0,0,173,174,5,84,0,0,174,175,
        5,85,0,0,175,176,5,82,0,0,176,177,5,78,0,0,177,34,1,0,0,0,178,179,
        5,87,0,0,179,180,5,72,0,0,180,181,5,73,0,0,181,182,5,76,0,0,182,
        183,5,69,0,0,183,36,1,0,0,0,184,185,5,87,0,0,185,186,5,69,0,0,186,
        187,5,78,0,0,187,188,5,68,0,0,188,38,1,0,0,0,189,190,5,73,0,0,190,
        191,5,78,0,0,191,192,5,80,0,0,192,193,5,85,0,0,193,194,5,84,0,0,
        194,40,1,0,0,0,195,199,7,2,0,0,196,198,7,3,0,0,197,196,1,0,0,0,198,
        201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,42,1,0,0,0,201,199,
        1,0,0,0,202,204,7,4,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,
        1,0,0,0,205,206,1,0,0,0,206,213,1,0,0,0,207,209,5,46,0,0,208,210,
        7,4,0,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,
        1,0,0,0,212,214,1,0,0,0,213,207,1,0,0,0,213,214,1,0,0,0,214,44,1,
        0,0,0,215,219,5,34,0,0,216,218,8,5,0,0,217,216,1,0,0,0,218,221,1,
        0,0,0,219,220,1,0,0,0,219,217,1,0,0,0,220,222,1,0,0,0,221,219,1,
        0,0,0,222,223,5,34,0,0,223,46,1,0,0,0,224,225,5,61,0,0,225,48,1,
        0,0,0,226,227,5,61,0,0,227,50,1,0,0,0,228,229,5,60,0,0,229,52,1,
        0,0,0,230,231,5,62,0,0,231,54,1,0,0,0,232,233,5,60,0,0,233,234,5,
        61,0,0,234,56,1,0,0,0,235,236,5,62,0,0,236,237,5,61,0,0,237,58,1,
        0,0,0,238,239,5,60,0,0,239,240,5,62,0,0,240,60,1,0,0,0,241,242,5,
        43,0,0,242,62,1,0,0,0,243,244,5,45,0,0,244,64,1,0,0,0,245,246,5,
        42,0,0,246,66,1,0,0,0,247,248,5,47,0,0,248,68,1,0,0,0,249,250,5,
        40,0,0,250,70,1,0,0,0,251,252,5,41,0,0,252,72,1,0,0,0,253,254,5,
        58,0,0,254,74,1,0,0,0,255,256,5,44,0,0,256,76,1,0,0,0,257,258,5,
        59,0,0,258,78,1,0,0,0,259,260,7,6,0,0,260,80,1,0,0,0,10,0,82,89,
        100,111,199,205,211,213,219,1,6,0,0
    ]

class BasicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NEWLINE = 1
    WS = 2
    REM_COMMENT = 3
    APOSTROPHE_COMMENT = 4
    IF = 5
    THEN = 6
    ELSE = 7
    PRINT = 8
    LET = 9
    END = 10
    GOTO = 11
    FOR = 12
    TO = 13
    STEP = 14
    NEXT = 15
    GOSUB = 16
    RETURN = 17
    WHILE = 18
    WEND = 19
    INPUT = 20
    ID = 21
    NUMBER = 22
    STRING = 23
    ASSIGN = 24
    EQ = 25
    LT = 26
    GT = 27
    LTE = 28
    GTE = 29
    NEQ = 30
    PLUS = 31
    MINUS = 32
    MUL = 33
    DIV = 34
    LPAREN = 35
    RPAREN = 36
    COLON = 37
    COMMA = 38
    SEMICOLON = 39
    TYPE_SUFFIX = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'IF'", "'THEN'", "'ELSE'", "'PRINT'", "'LET'", "'END'", "'GOTO'", 
            "'FOR'", "'TO'", "'STEP'", "'NEXT'", "'GOSUB'", "'RETURN'", 
            "'WHILE'", "'WEND'", "'INPUT'", "'<'", "'>'", "'<='", "'>='", 
            "'<>'", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "':'", "','", 
            "';'" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "WS", "REM_COMMENT", "APOSTROPHE_COMMENT", "IF", 
            "THEN", "ELSE", "PRINT", "LET", "END", "GOTO", "FOR", "TO", 
            "STEP", "NEXT", "GOSUB", "RETURN", "WHILE", "WEND", "INPUT", 
            "ID", "NUMBER", "STRING", "ASSIGN", "EQ", "LT", "GT", "LTE", 
            "GTE", "NEQ", "PLUS", "MINUS", "MUL", "DIV", "LPAREN", "RPAREN", 
            "COLON", "COMMA", "SEMICOLON", "TYPE_SUFFIX" ]

    ruleNames = [ "NEWLINE", "WS", "REM_COMMENT", "APOSTROPHE_COMMENT", 
                  "IF", "THEN", "ELSE", "PRINT", "LET", "END", "GOTO", "FOR", 
                  "TO", "STEP", "NEXT", "GOSUB", "RETURN", "WHILE", "WEND", 
                  "INPUT", "ID", "NUMBER", "STRING", "ASSIGN", "EQ", "LT", 
                  "GT", "LTE", "GTE", "NEQ", "PLUS", "MINUS", "MUL", "DIV", 
                  "LPAREN", "RPAREN", "COLON", "COMMA", "SEMICOLON", "TYPE_SUFFIX" ]

    grammarFileName = "Basic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


